@model Entities.BattleRoom

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Battle Room</title>
    <link rel="stylesheet" href="~/css/battle.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script type="text/javascript" async
            src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
    </script>
    <style>
        #timerBar {
            width: 100%;
            height: 20px;
            background-color: lightgray;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 10px;
        }

        #timerProgress {
            height: 100%;
            width: 100%;
            background-color: green;
            transition: width 1s linear;
        }

        .answers-container button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
<div class="battle-container">
    <div class="battle-header">
        <h1>Battle Room</h1>
    </div>

    <div class="players-container">
        <div class="player player1">
            <h3 id="player1Name">Waiting...</h3>
            <div class="score">Score: <span id="player1Score"></span></div>
            <div class="status"> <span id="player1Status"></span></div>
        </div>
        <div class="player player2">
            <h3 id="player2Name">Waiting...</h3>
            <div class="score">Score: <span id="player2Score"></span></div>
            <div class="status"> <span id="player2Status"></span></div>
        </div>
    </div>
    <div class="ready" id="ready">
        <button id="readyButton">Ready</button>
    </div>

    <div class="question-container" id="question-container">
        <div id="currentQuestion"></div>
        <div id="timerBar"><div id="timerProgress"></div></div>
        <div class="answers-container" id="answersContainer"></div>
        <div id="correctAnswer" style="font-weight:bold; color:green;"></div>
    </div>

    <div id="battleResult" class="battle-result">
        <div id="player1result"></div>
        <div id="player2result"></div>
        <button onclick="location.href='/Battle/BattleLobby'">Back to Lobby</button>
    </div>

    <input type="hidden" id="currentPlayerId" value="@ViewBag.CurrentPlayerId" />
    <input type="hidden" id="roomId" value="@Model.roomId" />
</div>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/battleHub")
        .withAutomaticReconnect()
        .build();

    const player1Id = "@ViewBag.Room.Player1Id.ToString()";
    const player2Id = "@ViewBag.Room.Player2Id.ToString()";
    const roomId = "@ViewBag.Room.roomId.ToString()";

    let battleTimer;
    let currentQuestionIndex = 0;
    const questionsJson = @Html.Raw(Json.Serialize(ViewBag.Room.Questions));
    const questions = JSON.parse(questionsJson);

    let answersSubmittedCount = 0;
    let answerTimeoutId = null;
    let hasAnswered = false;

    document.addEventListener('DOMContentLoaded', async () => {
        try {
            await connection.start();
            connection.invoke("JoinGroup", roomId);
            await connection.invoke("GetStudent", player1Id);
            await connection.invoke("GetStudent", player2Id);
        } catch (err) {
            console.error("Connection failed:", err);
        }
    });

    connection.onreconnected(() => {
        connection.invoke("JoinGroup", roomId);
    });

    document.getElementById("readyButton").addEventListener("click", async () => {
        await connection.invoke("SetReady", roomId);
        document.getElementById("ready").innerHTML = "Waiting for the opponent...";
    });

    connection.on("OpponentIsReady", (Id) => {
        if(Id === player1Id) document.getElementById("player1Status").innerHTML = "Ready";
        else if(Id === player2Id) document.getElementById("player2Status").innerHTML = "Ready";
    });

    connection.on("AllAreReady", () => {
        document.getElementById("player1Status").innerHTML = "";
        document.getElementById("player2Status").innerHTML = "";
        document.getElementById("ready").innerHTML = "";
        startBattle();
    });

    connection.on("Student", (student) => {
        if (student.studentId.toString() === player1Id) document.getElementById("player1Name").innerHTML = student.username;
        else if (student.studentId.toString() === player2Id) document.getElementById("player2Name").innerHTML = student.username;
    });

    connection.on("AnswerSubmitted", (result) => {
        console.log("Answer submitted:", result);
        document.getElementById("player1Score").innerHTML = result.player1score;
        document.getElementById("player2Score").innerHTML = result.player2score;

        const message = result.isCorrect ? `${result.playerName}'s answer is correct!` : `${result.playerName}'s answer is incorrect!`;
        if (result.playerId.toString() === player1Id) document.getElementById("player1result").innerHTML = message;
        else if (result.playerId.toString() === player2Id) document.getElementById("player2result").innerHTML = message;

        answersSubmittedCount++;
        if (answersSubmittedCount === 2) {
            clearTimeout(answerTimeoutId);
            document.getElementById("correctAnswer").innerHTML = `Correct answer: ${questions[currentQuestionIndex - 1].Answer}`;
            setTimeout(() => {
                answersSubmittedCount = 0;
                showQuestion();
            }, 5000);
        }
    });

    function startBattle() {
        showQuestion();
    }

    async function submitAnswer(roomId, variant) {
        console.log("Room ID:", roomId);
        console.log("Selected answer:", variant);
        try {
            if (!hasAnswered) {
                hasAnswered = true;
                await connection.invoke("SubmitAnswer", roomId, variant, currentQuestionIndex);
                console.log("Answer submitted successfully.");

            }
        } catch (err) {
            console.error("Failed to submit answer:", err);

        }
    }

    function showQuestion() {
        document.getElementById("player1result").innerHTML = "";
        document.getElementById("player2result").innerHTML = "";
        document.getElementById("correctAnswer").innerHTML = "";

        if (currentQuestionIndex >= questions.length) {
            endBattle();
            return;
        }

        const question = questions[currentQuestionIndex];
        const questionElement = document.getElementById('currentQuestion');
        const answersContainer = document.getElementById('answersContainer');
        const answerVariants = JSON.parse(question.AnswerVariants);

        questionElement.innerHTML = question.Question;
        answersContainer.innerHTML = '';

        const timerProgress = document.getElementById("timerProgress");
        timerProgress.style.width = "100%";
        let timeLeft = 10;

        hasAnswered = false;

        const timerInterval = setInterval(() => {
            timeLeft--;
            timerProgress.style.width = `${(timeLeft / 10) * 100}%`;
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
            }
        }, 1000);

        if (answerTimeoutId !== null) clearTimeout(answerTimeoutId);

        answerTimeoutId = setTimeout(() => {
            submitAnswer(document.getElementById('roomId').value, '');
        }, 10000);

        answerVariants.forEach(variant => {
            const button = document.createElement('button');
            button.textContent = variant;

            button.onclick = () => {
                clearTimeout(answerTimeoutId);
                clearInterval(timerInterval);
                submitAnswer(document.getElementById('roomId').value, variant);

                Array.from(document.getElementById('answersContainer').children).forEach(btn => {
                    btn.disabled = true;
                });

                button.style.backgroundColor = 'yellow';
            };

            answersContainer.appendChild(button);
        });

        currentQuestionIndex++;
    }

    function endBattle() {
        clearInterval(battleTimer);
        const player1Score = parseInt(document.getElementById("player1Score").innerHTML);
        const player2Score = parseInt(document.getElementById("player2Score").innerHTML);
        const player1Name = document.getElementById("player1Name").innerHTML;
        const player2Name = document.getElementById("player2Name").innerHTML;

        document.getElementById("question-container").style.display = "none";
        const battleResult = document.getElementById("battleResult");
        battleResult.classList.add("show");

        let resultMessage = "";
        if (player1Score > player2Score) {
            resultMessage = `<div class="winner">${player1Name} переміг!</div>`;
        } else if (player2Score > player1Score) {
            resultMessage = `<div class="winner">${player2Name} переміг!</div>`;
        } else {
            resultMessage = `<div class="winner draw">Нічия!</div>`;
        }

        resultMessage += `
            <div class="final-scores">
                <div>${player1Name}: ${player1Score} очків</div>
                <div>${player2Name}: ${player2Score} очків</div>
            </div>
        `;

        battleResult.innerHTML = resultMessage + battleResult.innerHTML;
    }
</script>
</body>
</html>
