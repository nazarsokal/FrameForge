// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(FrameForgeDbContext))]
    partial class FrameForgeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Entities.BattleHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Player1Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Player2Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("BattleHistory");
                });

            modelBuilder.Entity("Entities.BattleRoom", b =>
                {
                    b.Property<Guid>("roomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Player1Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("Player1Score")
                        .HasColumnType("int");

                    b.Property<Guid?>("Player2Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("Player2Score")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("char(36)");

                    b.HasKey("roomId");

                    b.ToTable("BattleRooms");
                });

            modelBuilder.Entity("Entities.EnrolledLevels", b =>
                {
                    b.Property<Guid>("LevelsEnrolledKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("LevelTopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("MoneyReward")
                        .HasColumnType("double");

                    b.Property<int>("StarsReward")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("LevelsEnrolledKey");

                    b.ToTable("EnrolledLevels", (string)null);
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ExerciseDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExerciseRequirements")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExerciseStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExererciseDifficulty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<double>("MoneyReward")
                        .HasColumnType("double");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("a20a1008-a76a-4a19-8edc-ff7c5ba60650"),
                            Email = "TestUser@test.com",
                            MoneyAmount = 100.45,
                            Password = "TestPassword",
                            StarsAmount = 0,
                            Username = "TestUserName"
                        });
                });

            modelBuilder.Entity("Entities.ExerciseSubmission", b =>
                {
                    b.Property<Guid>("SubmittedExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Feedback")
                        .HasColumnType("longtext");

                    b.Property<double>("MoneyReward")
                        .HasColumnType("double");

                    b.Property<double>("StarsReward")
                        .HasColumnType("double");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("StudentSubmittedId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SubmittedExerciseId");

                    b.ToTable("ExerciseSubmissions", (string)null);
                });

            modelBuilder.Entity("Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GoogleId")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.Property<string>("TypeOfUser")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("TypeOfUser").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.HasBaseType("Entities.User");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<double>("MoneyAmount")
                        .HasColumnType("double");

                    b.Property<int>("StarsAmount")
                        .HasColumnType("int");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Entities.Teacher", b =>
                {
                    b.HasBaseType("Entities.User");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Entities.Group", b =>
                {
                    b.HasOne("Entities.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.HasOne("Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entities.Teacher", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
